{
    "sourceFile": "dataAPI/controllers/jogo.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1642540384007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1642540384007,
            "name": "Commit-0",
            "content": "const Jogo = require(\"../models/jogo.js\");\r\nconst Partida = require(\"../models/partida.js\");\r\nconst JogoEquipa = require(\"../models/jogoEquipa.js\");\r\nconst Jogos = module.exports\r\nvar axios = require(\"axios\").default;\r\nvar sql = require('../models/db.js');\r\n\r\nJogos.listarJogos = async () => {\r\n    var res = await Jogo.getAllJogos();\r\n    var jogos =[];\r\n    var equipas =[]\r\n    console.log(res)\r\n    for(let i=0 ; i<res.length; i++){\r\n      res[i].data=new Date(res[i].data).toISOString().replace(/T/, ' ').replace(/\\..+/, '');\r\n      res[i].odd=parseFloat(res[i].odd)\r\n      if (i<res.length-1 && res[i].idJogo==res[i+1].idJogo){\r\n        equipas.push({idEquipa:res[i].idEquipa,equipa:res[i].Nome,odd:res[i].odd,idPartida:res[i].idPartida});\r\n      }\r\n      else{\r\n        equipas.push({idEquipa:res[i].idEquipa,equipa:res[i].Nome,odd:res[i].odd,idPartida:res[i].idPartida});\r\n        jogos.push({name:res[i].name,id:res[i].idJogo,type:res[i].Desporto,data:res[i].data,equipas:equipas});\r\n        equipas=[];\r\n      }\r\n    }\r\n    return jogos;\r\n  };\r\n\r\nJogos.getRecentGame= () => {\r\n    return Jogo.getMostRecentGame();\r\n  };\r\n\r\n  var headers = {\r\n    'x-rapidapi-host': 'unibet.p.rapidapi.com',\r\n    'x-rapidapi-key': '8cf7d9caf6msh0c78ad7a27547d5p198c26jsn7f2ac9d99f04'\r\n  }\r\n  \r\n\r\nvar requestFootball = setInterval(async function(){\r\n  const delay = ms => new Promise(resolve => setTimeout(resolve, ms))\r\n  await delay(2000);\r\n  axios.get('https://unibet.p.rapidapi.com/matches-by-competition',{\r\n    params:{competitionid:'football/england/premier_league'},\r\n    headers:headers\r\n  }).then(async function(response) {\r\n    sql.getConnection(async function(err, connection) {\r\n      try {\r\n        connection.beginTransaction()\r\n        const queryPromises = []\r\n        var jogos= response.data;\r\n        console.log(jogos);\r\n        for(i in jogos){\r\n          queryPromises.push(Jogo.createJogoFutebol(jogos[i],connection));\r\n          queryPromises.push(Partida.createPartidaFutebol(jogos[i],connection));\r\n          queryPromises.push(JogoEquipa.createEquipaAjogar(jogos[i].id,jogos[i].team1,jogos[i].team2.name,connection));\r\n        }\r\n        const results = await Promise.all(queryPromises)\r\n        connection.commit()\r\n        connection.release()\r\n        return results\r\n    } catch (err) {\r\n      console.log(\"error \", err);\r\n        connection.rollback()\r\n        connection.release()\r\n    }\r\n  })\r\n  }).catch(function (error) {\r\n    console.error(error);\r\n  });\r\n}, 60000);\r\n\r\n/* NOT WORKING\r\nvar requestFormula1 = setInterval(function(){\r\n  axios.get('https://unibet.p.rapidapi.com/matches-by-competition',{\r\n    params:{competitionid:'formula_1/race'},\r\n    headers:headers\r\n  }).then(async function(response) {\r\n    console.log(response.data);\r\n    sql.getConnection(async function(err, connection) {\r\n      try {\r\n        connection.beginTransaction()\r\n        const queryPromises = []\r\n        var jogos= response.data;\r\n        for(i in jogos){\r\n          queryPromises.push(Jogo.createJogo(jogos[i]));\r\n          queryPromises.push(Partida.createPartidaFutebol(jogos[i]));\r\n        }\r\n        const results = await Promise.all(queryPromises)\r\n        connection.commit()\r\n        connection.release()\r\n        return results\r\n    } catch (err) {\r\n        connection.rollback()\r\n        connection.release()\r\n    }\r\n  })\r\n  }).catch(function (error) {\r\n    console.error(error);\r\n  });\r\n}, 60000);\r\n*/\r\n/*\r\nvar requestBasketball = setInterval(async function(){\r\n  const delay = ms => new Promise(resolve => setTimeout(resolve, ms))\r\n  await delay(5000);\r\n  axios.get('https://unibet.p.rapidapi.com/matches-by-competition',{\r\n    params:{competitionid:'basketball/nba'},\r\n    headers:headers\r\n  }).then(async function(response) {\r\n    sql.getConnection(async function(err, connection) {\r\n      try {\r\n        connection.beginTransaction()\r\n        const queryPromises = []\r\n        var jogos= response.data;\r\n        for(i in jogos){\r\n          queryPromises.push(Jogo.createJogoBasquetebol(jogos[i],connection));\r\n          queryPromises.push(Partida.createPartidaBasquetebol(jogos[i],connection));\r\n          queryPromises.push(JogoEquipa.createEquipaAjogar(jogos[i].id,jogos[i].team1.name,jogos[i].team2.name,connection));\r\n        }\r\n        const results = await Promise.all(queryPromises)\r\n        connection.commit()\r\n        connection.release()\r\n        return results\r\n    } catch (err) {\r\n        console.log(\"error\", err)\r\n        connection.rollback()\r\n        connection.release()\r\n    }\r\n  })\r\n  }).catch(function (error) {\r\n    console.error(error);\r\n  });\r\n}, 60000);\r\n\r\nvar requestTennis = setInterval(async function(){\r\n  const delay = ms => new Promise(resolve => setTimeout(resolve, ms))\r\n  await delay(10000);\r\n  axios.get('https://unibet.p.rapidapi.com/matches-by-competition',{\r\n    params:{competitionid:'tennis/grand_slam/australian_open'},\r\n    headers:headers\r\n  }).then(async function(response) {\r\n    console.log(response.data)\r\n    sql.getConnection(async function(err, connection) {\r\n      try {\r\n        connection.beginTransaction()\r\n        const queryPromises = []\r\n        var jogos= response.data;\r\n        for(i in jogos){\r\n          queryPromises.push(Jogo.createJogoTennis(jogos[i],connection));\r\n          queryPromises.push(Partida.createPartidaBasquetebol(jogos[i],connection));\r\n          queryPromises.push(JogoEquipa.createEquipaAjogar(jogos[i].id,jogos[i].team1.name,jogos[i].team2.name,connection));\r\n        }\r\n        const results = await Promise.all(queryPromises)\r\n        connection.commit()\r\n        connection.release()\r\n        return results\r\n    } catch (err) {\r\n        console.log(\"error\", err)\r\n        connection.rollback()\r\n        connection.release()\r\n    }\r\n  })\r\n  }).catch(function (error) {\r\n    console.error(error);\r\n  });\r\n}, 60000);*/\r\n"
        }
    ]
}